{"version":3,"sources":["SearchForm.js","Nav.js","Photo.js","NotFound.js","PhotoList.js","config.js","ErrorPage.js","App.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","props","onSearch","query","value","path","history","push","currentTarget","reset","className","onSubmit","this","type","name","placeholder","required","ref","input","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","to","Photo","src","url","alt","NotFound","PhotoList","photos","results","data","length","map","photo","farm","server","id","secret","key","title","apiKey","ErrorPage","App","performSearch","category","axios","get","config","then","response","setState","catch","error","console","log","state","dogs","koalas","kangaroos","search","loading","basename","exact","render","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e5adefd3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass SearchForm extends Component {\r\n    /**\r\n     * It's executed when the search button is clicked, \r\n     * it calls to performSearch in App passing it the two parameters\r\n     * I needed help to find out this solution\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSearch(this.query.value, 'search');\r\n        let query = this.query.value;\r\n        let path = `/search/${query}`;\r\n        this.props.history.push(path);\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n                <input \r\n                    type=\"search\" \r\n                    name=\"search\" \r\n                    placeholder=\"Search\" \r\n                    required\r\n                    ref={input => this.query = input}\r\n                    />\r\n                <button type=\"submit\" className=\"search-button\">\r\n                <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                </svg>\r\n                </button>\r\n            </form>\r\n            </>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default withRouter(SearchForm);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className=\"main-nav\">\r\n            <ul>\r\n                <li><NavLink to='/dogs'>Dogs</NavLink></li>\r\n                <li><NavLink to='/koalas'>Koalas</NavLink></li>\r\n                <li><NavLink to='/kangaroos'>Kangaroos</NavLink></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n//with the prop gets the url and the image is shown\r\nconst Photo = props => (\r\n  <li>\r\n    <img src={props.url} alt=\"\" />\r\n  </li>\r\n);\r\n\r\nexport default Photo;","import React from 'react';\r\n//This Component is shown when there aren't matches with the search\r\nconst NotFound = props => (\r\n  <li className='not-found'>\r\n    <h3>No Results Found</h3>\r\n    <p>You search did not return any results. Please try again.</p>\r\n  </li>\r\n);\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport Photo from './Photo';\r\nimport NotFound from './NotFound';\r\n\r\nconst PhotoList = props => { \r\n  const results = props.data;\r\n  let photos;\r\n  if (results.length > 0){\r\n      //gets the photo data and maps the array, it builds the url as Flicker says.\r\n      //Each photo is loaded in a Photo component\r\n    photos = results.map(photo =>    \r\n        <Photo url={ `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg` } key={ photo.id }/>\r\n    );\r\n  } else {\r\n      //calls the NotFound component if we haven't get any data\r\n    photos = <NotFound />\r\n  }\r\n  return(\r\n      //displays in the browser the result\r\n    <div className=\"photo-container\">\r\n        <h2>{props.title}</h2>\r\n        <ul>\r\n            {photos}\r\n        </ul> \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default PhotoList;","const apiKey = 'd03f18034cb209d1bb3aa239c740ff72';\r\nexport default apiKey;","import React from 'react';\r\n//This Component is shown when something incorrect is typed in the browser\r\nconst ErrorPage = props => (\r\n  <li className='not-found'>\r\n    <h3>Error 404</h3>\r\n    <p>Sorry... This page doesn't exist</p>\r\n  </li>\r\n);\r\n\r\nexport default ErrorPage;","import React, {Component} from 'react';\nimport {\n  Switch,\n  Route,\n  Redirect,\n  BrowserRouter\n} from 'react-router-dom';\n\nimport './css/index.css';\nimport axios from 'axios';\nimport SearchForm from './SearchForm';\nimport Nav from './Nav';\nimport PhotoList from './PhotoList';\nimport config from './config.js';\nimport ErrorPage from './ErrorPage.js';\n\n\n\nexport default class App extends Component {\n  \n  constructor() {\n    super();\n    //one state for each category, plus another one for the search\n    this.state={\n      dogs: [], \n      koalas: [], \n      kangaroos: [], \n      search: [],\n      loading: true\n    }\n  }\n  //getting the data for the three categories\n  componentDidMount(){\n    this.performSearch('dogs', 'dogs');\n    this.performSearch('koalas', 'koalas');\n    this.performSearch('kangaroos', 'kangaroos');\n  } \n  //two parameters, the query and the category to store the info in the correct state\n  performSearch = (query, category) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${config}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n    .then(response => {\n\n      this.setState({\n        [category]: response.data.photos.photo,\n        loading: false,\n        title: query\n      })\n    })\n    .catch(error => {\n      console.log('Error fetching and parsing data', error);\n    });\n  }\n\n  render(){\n    return (\n      \n      <div className=\"container\">\n        <BrowserRouter basename=\"/photo-gallery\">\n        \n          <SearchForm onSearch={this.performSearch} />\n          <Nav />\n          { /*It will display a loading message if the data has been fetched, I can't get it for the search */\n          this.state.loading ? <p>Loading...</p> : (\n            //Only will route the first match, the index page redirects to /dogs\n            <Switch>\n                <Route exact path='/' render={ ()=> <Redirect to={`/dogs`} /> }/>\n                <Route path='/dogs' render={() => <PhotoList title=\"dogs\" data={this.state.dogs}/>} />\n                <Route path='/koalas' render={() => <PhotoList title=\"koalas\" data={this.state.koalas}/>} />\n                <Route path='/kangaroos' render={() => <PhotoList title=\"kangaroos\" data={this.state.kangaroos}/>} />\n                <Route path='/search' render={() => <PhotoList title={this.state.title} data={this.state.search} />} />\n                <Route component={ErrorPage} />\n            </Switch>  \n            )   \n          }\n        </BrowserRouter>\n              \n      </div>\n    );\n  }\n  \n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}